import requests
import pandas as pd
import matplotlib.pyplot as plt

class ChainAnalyticsHub:
    def __init__(self, base_url='https://api.blockchair.com'):
        self.base_url = base_url
        self.data = {}

    def fetch_block_data(self, blockchain: str, block_number: int) -> str:
        endpoint = f'{self.base_url}/{blockchain}/blocks'
        params = {'q': f'id({block_number})'}
        response = requests.get(endpoint, params=params)
        if response.status_code == 200:
            self.data[f'{blockchain}_block_{block_number}'] = response.json()['data']
            return f"Block data for {blockchain} block {block_number} fetched successfully."
        else:
            return f"Failed to fetch data: {response.status_code} - {response.text}"

    def fetch_transaction_data(self, blockchain: str, tx_hash: str) -> str:
        endpoint = f'{self.base_url}/{blockchain}/dashboards/transaction/{tx_hash}'
        response = requests.get(endpoint)
        if response.status_code == 200:
            self.data[f'{blockchain}_tx_{tx_hash}'] = response.json()['data']
            return f"Transaction data for {blockchain} tx {tx_hash} fetched successfully."
        else:
            return f"Failed to fetch data: {response.status_code} - {response.text}"

    def get_block_data(self, blockchain: str, block_number: int) -> pd.DataFrame:
        key = f'{blockchain}_block_{block_number}'
        if key not in self.data:
            return pd.DataFrame()
        block_data = self.data[key][str(block_number)]
        df = pd.DataFrame([block_data])
        return df

    def get_transaction_data(self, blockchain: str, tx_hash: str) -> pd.DataFrame:
        key = f'{blockchain}_tx_{tx_hash}'
        if key not in self.data:
            return pd.DataFrame()
        tx_data = self.data[key][tx_hash]
        df = pd.DataFrame([tx_data])
        return df

    def plot_block_size(self, blockchain: str, block_number: int):
        df = self.get_block_data(blockchain, block_number)
        if df.empty:
            print("No data available to plot.")
            return
        plt.figure(figsize=(12, 6))
        plt.bar(df['id'], df['size'], label='Block Size')
        plt.title(f'{blockchain.capitalize()} Block Size for Block {block_number}')
        plt.xlabel('Block ID')
        plt.ylabel('Size (Bytes)')
        plt.legend()
        plt.show()

    def plot_transaction_fees(self, blockchain: str, tx_hash: str):
        df = self.get_transaction_data(blockchain, tx_hash)
        if df.empty:
            print("No data available to plot.")
            return
        plt.figure(figsize=(12, 6))
        plt.bar(df.index, df['transaction']['fee'], label='Transaction Fee')
        plt.title(f'{blockchain.capitalize()} Transaction Fee for TX {tx_hash}')
        plt.xlabel('Transaction Hash')
        plt.ylabel('Fee (Satoshis/Wei)')
        plt.legend()
        plt.show()

# Example Usage
if __name__ == "__main__":
    chain_analytics_hub = ChainAnalyticsHub()

    # Fetch block data for Bitcoin block 600000
    print(chain_analytics_hub.fetch_block_data('bitcoin', 600000))

    # Fetch transaction data for Bitcoin transaction hash
    print(chain_analytics_hub.fetch_transaction_data('bitcoin', 'your_transaction_hash_here'))

    # Plot block size for Bitcoin block 600000
    chain_analytics_hub.plot_block_size('bitcoin', 600000)

    # Plot transaction fees for Bitcoin transaction
    chain_analytics_hub.plot_transaction_fees('bitcoin', 'your_transaction_hash_here')
